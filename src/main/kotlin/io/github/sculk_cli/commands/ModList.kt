package io.github.sculk_cli.commands

import com.github.ajalt.clikt.core.CliktCommand
import com.github.ajalt.clikt.core.terminal
import com.github.ajalt.clikt.parameters.arguments.argument
import com.github.ajalt.clikt.parameters.arguments.help
import com.github.ajalt.clikt.parameters.types.file
import com.github.ajalt.mordant.animation.coroutines.animateInCoroutine
import com.github.ajalt.mordant.animation.progress.advance
import com.github.ajalt.mordant.widgets.progress.*
import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import io.github.sculk_cli.Context

class ModList : CliktCommand(name = "modlist", help = "Generate a markdown mod list") {
    private val file by argument().file().help("The file to write the modlist to")

    override fun run() = runBlocking {
        coroutineScope {
            val ctx = Context.Companion.getOrCreate(terminal)
            var markdown = """
            _Mod list generated by [Sculk](https://github.com/sculk-cli/sculk)_
            
            # ${ctx.pack.getManifest().name} (${ctx.pack.getManifest().minecraft} / ${ctx.pack.getManifest().loader.type})
            
            ${ctx.pack.getManifest().summary ?: ""}
        """.trimIndent()

            val progress = progressBarContextLayout {
                text(terminal.theme.info("Fetching descriptions"))
                marquee(width = 60) { terminal.theme.warning(context) }
                percentage()
                progressBar()
                completed(style = terminal.theme.success)
            }.animateInCoroutine(
                terminal,
                total = ctx.pack.getManifests().size.toLong(),
                context = ""
            )

            launch { progress.execute() }

            for ((_, manifest) in ctx.pack.getManifests()) {
                progress.advance(1)
                progress.update { context = manifest.filename }
                var title: String?
                var description: String? = null

                if (manifest.sources.modrinth != null) {
                    val project =
                        ctx.modrinth.getProject(manifest.sources.modrinth!!.projectId)!!
                    title = project.title
                    description = project.description
                } else if (manifest.sources.curseforge != null) {
                    val project =
                        ctx.curseforge.getMod(manifest.sources.curseforge!!.projectId)!!
                    title = project.name
                    description = project.summary
                } else {
                    title = manifest.filename
                }

                markdown += """
                ## $title
                ${"${description ?: "\n"}\n"}
               
             """.trimIndent()
            }

            file.writeText(markdown.trim())
            terminal.info("Wrote modlist")
        }
    }
}
